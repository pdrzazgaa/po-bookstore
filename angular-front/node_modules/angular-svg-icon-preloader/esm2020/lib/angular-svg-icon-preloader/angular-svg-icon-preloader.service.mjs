import { HttpClient } from '@angular/common/http';
import { Injectable, Optional } from '@angular/core';
import { SvgIconRegistryService } from 'angular-svg-icon';
import { Subject } from 'rxjs';
import { take } from 'rxjs/operators';
import { AngularSvgIconPreloaderConfig } from '../angular-svg-icon-preloader-config.class';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../angular-svg-icon-preloader-config.class";
import * as i3 from "angular-svg-icon";
export class AngularSvgIconPreloaderService {
    constructor(_http, config, _iconRegistry) {
        this._http = _http;
        this._iconRegistry = _iconRegistry;
        this.configUrl = './assets/icons.json';
        this.configSubject = new Subject();
        if (config && config.configUrl) {
            this.configUrl = config.configUrl;
        }
    }
    loadConfig() {
        return this._http
            .get(this.configUrl)
            .toPromise()
            .then((configData) => {
            this.iconsFileData = configData;
            this.loadIcons();
        })
            .catch((err) => {
            console.error('An error occurred loading the icons:\n', err, '\nNo icons will be loaded.');
            this.iconsFileData = { customIcons: [], iconImageFiles: [] };
            this.loadIcons();
        });
    }
    loadIcons() {
        this.iconsFileData.iconImageFiles.forEach((i) => {
            this._iconRegistry
                .loadSvg(i.iconPath, i.iconName)
                .pipe(take(1))
                .subscribe();
        });
        this.iconsFileData.customIcons.forEach((i) => {
            this._iconRegistry.addSvg(i.iconName, i.iconData);
        });
    }
}
AngularSvgIconPreloaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderService, deps: [{ token: i1.HttpClient }, { token: i2.AngularSvgIconPreloaderConfig, optional: true }, { token: i3.SvgIconRegistryService }], target: i0.ɵɵFactoryTarget.Injectable });
AngularSvgIconPreloaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.AngularSvgIconPreloaderConfig, decorators: [{
                    type: Optional
                }] }, { type: i3.SvgIconRegistryService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1zdmctaWNvbi1wcmVsb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1zdmctaWNvbi1wcmVsb2FkZXIvc3JjL2xpYi9hbmd1bGFyLXN2Zy1pY29uLXByZWxvYWRlci9hbmd1bGFyLXN2Zy1pY29uLXByZWxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0QyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQzs7Ozs7QUFNM0YsTUFBTSxPQUFPLDhCQUE4QjtJQVExQyxZQUNTLEtBQWlCLEVBQ2IsTUFBcUMsRUFDekMsYUFBcUM7UUFGckMsVUFBSyxHQUFMLEtBQUssQ0FBWTtRQUVqQixrQkFBYSxHQUFiLGFBQWEsQ0FBd0I7UUFWdEMsY0FBUyxHQUFXLHFCQUFxQixDQUFDO1FBSzNDLGtCQUFhLEdBQWlCLElBQUksT0FBTyxFQUFPLENBQUM7UUFPdkQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUMvQixJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7U0FDbEM7SUFDRixDQUFDO0lBRUQsVUFBVTtRQUNULE9BQU8sSUFBSSxDQUFDLEtBQUs7YUFDZixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUNuQixTQUFTLEVBQUU7YUFDWCxJQUFJLENBQ0osQ0FBQyxVQUdBLEVBQUUsRUFBRTtZQUNKLElBQUksQ0FBQyxhQUFhLEdBQUcsVUFBVSxDQUFDO1lBQ2hDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQ0Q7YUFDQSxLQUFLLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUNuQixPQUFPLENBQUMsS0FBSyxDQUNaLHdDQUF3QyxFQUN4QyxHQUFHLEVBQ0gsNEJBQTRCLENBQzVCLENBQUM7WUFDRixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsV0FBVyxFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLENBQUM7WUFDN0QsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFNBQVM7UUFDUixJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFnQixFQUFFLEVBQUU7WUFDOUQsSUFBSSxDQUFDLGFBQWE7aUJBQ2hCLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUM7aUJBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2IsU0FBUyxFQUFFLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQWlCLEVBQUUsRUFBRTtZQUM1RCxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7OzJIQXBEVyw4QkFBOEI7K0hBQTlCLDhCQUE4QixjQUY5QixNQUFNOzJGQUVOLDhCQUE4QjtrQkFIMUMsVUFBVTttQkFBQztvQkFDWCxVQUFVLEVBQUUsTUFBTTtpQkFDbEI7OzBCQVdFLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN2Z0ljb25SZWdpc3RyeVNlcnZpY2UgfSBmcm9tICdhbmd1bGFyLXN2Zy1pY29uJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBbmd1bGFyU3ZnSWNvblByZWxvYWRlckNvbmZpZyB9IGZyb20gJy4uL2FuZ3VsYXItc3ZnLWljb24tcHJlbG9hZGVyLWNvbmZpZy5jbGFzcyc7XG5pbXBvcnQgeyBDdXN0b21JY29uRGF0YSwgSWNvbkltYWdlRmlsZSB9IGZyb20gJy4uL2ljb24uaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoe1xuXHRwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJTdmdJY29uUHJlbG9hZGVyU2VydmljZSB7XG5cdHByaXZhdGUgY29uZmlnVXJsOiBzdHJpbmcgPSAnLi9hc3NldHMvaWNvbnMuanNvbic7XG5cdHByaXZhdGUgaWNvbnNGaWxlRGF0YToge1xuXHRcdGljb25JbWFnZUZpbGVzOiBJY29uSW1hZ2VGaWxlW107XG5cdFx0Y3VzdG9tSWNvbnM6IEN1c3RvbUljb25EYXRhW107XG5cdH07XG5cdHB1YmxpYyBjb25maWdTdWJqZWN0OiBTdWJqZWN0PGFueT4gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cHJpdmF0ZSBfaHR0cDogSHR0cENsaWVudCxcblx0XHRAT3B0aW9uYWwoKSBjb25maWc6IEFuZ3VsYXJTdmdJY29uUHJlbG9hZGVyQ29uZmlnLFxuXHRcdHByaXZhdGUgX2ljb25SZWdpc3RyeTogU3ZnSWNvblJlZ2lzdHJ5U2VydmljZVxuXHQpIHtcblx0XHRpZiAoY29uZmlnICYmIGNvbmZpZy5jb25maWdVcmwpIHtcblx0XHRcdHRoaXMuY29uZmlnVXJsID0gY29uZmlnLmNvbmZpZ1VybDtcblx0XHR9XG5cdH1cblxuXHRsb2FkQ29uZmlnKCk6IFByb21pc2U8YW55PiB7XG5cdFx0cmV0dXJuIHRoaXMuX2h0dHBcblx0XHRcdC5nZXQodGhpcy5jb25maWdVcmwpXG5cdFx0XHQudG9Qcm9taXNlKClcblx0XHRcdC50aGVuKFxuXHRcdFx0XHQoY29uZmlnRGF0YToge1xuXHRcdFx0XHRcdGljb25JbWFnZUZpbGVzOiBJY29uSW1hZ2VGaWxlW107XG5cdFx0XHRcdFx0Y3VzdG9tSWNvbnM6IEN1c3RvbUljb25EYXRhW107XG5cdFx0XHRcdH0pID0+IHtcblx0XHRcdFx0XHR0aGlzLmljb25zRmlsZURhdGEgPSBjb25maWdEYXRhO1xuXHRcdFx0XHRcdHRoaXMubG9hZEljb25zKCk7XG5cdFx0XHRcdH1cblx0XHRcdClcblx0XHRcdC5jYXRjaCgoZXJyOiBhbnkpID0+IHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdFx0XHQnQW4gZXJyb3Igb2NjdXJyZWQgbG9hZGluZyB0aGUgaWNvbnM6XFxuJyxcblx0XHRcdFx0XHRlcnIsXG5cdFx0XHRcdFx0J1xcbk5vIGljb25zIHdpbGwgYmUgbG9hZGVkLidcblx0XHRcdFx0KTtcblx0XHRcdFx0dGhpcy5pY29uc0ZpbGVEYXRhID0geyBjdXN0b21JY29uczogW10sIGljb25JbWFnZUZpbGVzOiBbXSB9O1xuXHRcdFx0XHR0aGlzLmxvYWRJY29ucygpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRsb2FkSWNvbnMoKSB7XG5cdFx0dGhpcy5pY29uc0ZpbGVEYXRhLmljb25JbWFnZUZpbGVzLmZvckVhY2goKGk6IEljb25JbWFnZUZpbGUpID0+IHtcblx0XHRcdHRoaXMuX2ljb25SZWdpc3RyeVxuXHRcdFx0XHQubG9hZFN2ZyhpLmljb25QYXRoLCBpLmljb25OYW1lKVxuXHRcdFx0XHQucGlwZSh0YWtlKDEpKVxuXHRcdFx0XHQuc3Vic2NyaWJlKCk7XG5cdFx0fSk7XG5cdFx0dGhpcy5pY29uc0ZpbGVEYXRhLmN1c3RvbUljb25zLmZvckVhY2goKGk6IEN1c3RvbUljb25EYXRhKSA9PiB7XG5cdFx0XHR0aGlzLl9pY29uUmVnaXN0cnkuYWRkU3ZnKGkuaWNvbk5hbWUsIGkuaWNvbkRhdGEpO1xuXHRcdH0pO1xuXHR9XG59XG4iXX0=