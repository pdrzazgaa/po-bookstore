import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, Optional, APP_INITIALIZER, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { take } from 'rxjs/operators';
import * as i1 from '@angular/common/http';
import * as i3 from 'angular-svg-icon';

class AngularSvgIconPreloaderConfig {
    constructor() { }
}

class AngularSvgIconPreloaderService {
    constructor(_http, config, _iconRegistry) {
        this._http = _http;
        this._iconRegistry = _iconRegistry;
        this.configUrl = './assets/icons.json';
        this.configSubject = new Subject();
        if (config && config.configUrl) {
            this.configUrl = config.configUrl;
        }
    }
    loadConfig() {
        return this._http
            .get(this.configUrl)
            .toPromise()
            .then((configData) => {
            this.iconsFileData = configData;
            this.loadIcons();
        })
            .catch((err) => {
            console.error('An error occurred loading the icons:\n', err, '\nNo icons will be loaded.');
            this.iconsFileData = { customIcons: [], iconImageFiles: [] };
            this.loadIcons();
        });
    }
    loadIcons() {
        this.iconsFileData.iconImageFiles.forEach((i) => {
            this._iconRegistry
                .loadSvg(i.iconPath, i.iconName)
                .pipe(take(1))
                .subscribe();
        });
        this.iconsFileData.customIcons.forEach((i) => {
            this._iconRegistry.addSvg(i.iconName, i.iconData);
        });
    }
}
AngularSvgIconPreloaderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderService, deps: [{ token: i1.HttpClient }, { token: AngularSvgIconPreloaderConfig, optional: true }, { token: i3.SvgIconRegistryService }], target: i0.ɵɵFactoryTarget.Injectable });
AngularSvgIconPreloaderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () {
        return [{ type: i1.HttpClient }, { type: AngularSvgIconPreloaderConfig, decorators: [{
                        type: Optional
                    }] }, { type: i3.SvgIconRegistryService }];
    } });

function initConfig(svgSvc) {
    return () => svgSvc.loadConfig();
}
class AngularSvgIconPreloaderModule {
    static forRoot(config) {
        return {
            ngModule: AngularSvgIconPreloaderModule,
            providers: [
                {
                    provide: AngularSvgIconPreloaderConfig,
                    useValue: config,
                },
                AngularSvgIconPreloaderService,
            ],
        };
    }
}
AngularSvgIconPreloaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
AngularSvgIconPreloaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderModule, imports: [CommonModule] });
AngularSvgIconPreloaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderModule, providers: [
        AngularSvgIconPreloaderService,
        {
            provide: APP_INITIALIZER,
            useFactory: initConfig,
            deps: [AngularSvgIconPreloaderService],
            multi: true,
        },
    ], imports: [CommonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: AngularSvgIconPreloaderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    providers: [
                        AngularSvgIconPreloaderService,
                        {
                            provide: APP_INITIALIZER,
                            useFactory: initConfig,
                            deps: [AngularSvgIconPreloaderService],
                            multi: true,
                        },
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AngularSvgIconPreloaderModule, AngularSvgIconPreloaderService, initConfig };
//# sourceMappingURL=angular-svg-icon-preloader.mjs.map
